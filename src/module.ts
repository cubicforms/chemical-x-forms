import {
  addImportsDir,
  addPlugin,
  addTypeTemplate,
  createResolver,
  defineNuxtModule
} from "@nuxt/kit"
import { inputTextAreaNodeTransform } from "./runtime/lib/core/transforms/input-text-area-transform"
import { selectNodeTransform } from "./runtime/lib/core/transforms/select-transform"

// Module options TypeScript interface definition
// eslint-disable-next-line @typescript-eslint/no-empty-object-type
export interface ModuleOptions {}

export default defineNuxtModule<ModuleOptions>({
  meta: {
    name: "chemical-x-forms",
    configKey: "chemicalX",
  },
  defaults: {},
  setup(_options, _nuxt) {
    _nuxt.options.vue.compilerOptions.nodeTransforms ||= []
    _nuxt.options.vue.compilerOptions.nodeTransforms.push(
      selectNodeTransform,
      inputTextAreaNodeTransform
    )

    // _nuxt.hook("vite:extendConfig", (config) => {
    // config.build ||= {}
    // config.build.rollupOptions ||= {}
    // config.build.rollupOptions.external
    //   = config.build.rollupOptions.external || []

    // if (Array.isArray(config.build.rollupOptions.external)) {
    //   config.build.rollupOptions.external.push(
    //     "@vue/compiler-core",
    //     "@vue/shared",
    //     "nuxt",
    //     // "vue",
    //     "zod",
    //     "immer",
    //     /lodash-es.*/,
    //   )
    // }

    // const originalOnWarn = config.build.rollupOptions.onwarn
    //   || ((warning, warn) => warn(warning))
    // config.build.rollupOptions.onwarn = (warning, warn) => {
    //   // Check if it's the "UNUSED_EXTERNAL_IMPORT" warning for
    //   // "Text" / "createCommentVNode" in "runtime-dom.esm-bundler.js"
    //   if (
    //     warning.code === "UNUSED_EXTERNAL_IMPORT"
    //     && /"Text" and "createCommentVNode" are imported from external module "@vue\/runtime-core"/.test(warning.message)
    //     && /runtime-dom\.esm-bundler\.js/.test(warning.message)
    //   ) {
    //     // Skip it, do NOT call warn(warning)
    //     return
    //   }

    //   // Otherwise, pass it to the default warning handler
    //   originalOnWarn(warning, warn)
    // }
    // })

    const resolver = createResolver(import.meta.url)

    // _nuxt.hook("app:created", () => {
    //   addImportsDir(resolver.resolve("./runtime/composables"))
    // })
    addImportsDir(resolver.resolve("./runtime/composables"))

    addPlugin({
      src: resolver.resolve("./runtime/plugins/xmodel"),
      mode: "client",
    })

    addPlugin({
      src: resolver.resolve("./runtime/plugins/xmodel-stub"),
      mode: "server",
    })

    // v-xmodel directive type
    addTypeTemplate({
      filename: "types/v-xmodel.d.ts",
      getContents: () => `// Generated by @chemical-x/forms
import type { VXmodelDirective } from "./runtime/plugins/xmodel.ts"

declare module "vue" {
  interface GlobalDirectives { 
    vXmodel: ObjectDirective<HTMLElement, VXmodelDirective>
  }
}

export { }`,
    })
  },
})

// Used by nuxt/module-builder for `types.d.ts` generation
// export * from "./runtime/types/types-api"
// export * from "./runtime/types/types-core"
// export * from "./runtime/types/types-zod"
// export * from "./runtime/types/types-zod-adapter"

// export type { AbstractSchema }
