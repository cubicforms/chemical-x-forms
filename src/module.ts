import {
  addImportsDir,
  addPlugin,
  addTypeTemplate,
  createResolver,
  defineNuxtModule,
} from "@nuxt/kit"
import { inputTextAreaNodeTransform } from "./runtime/lib/core/transforms/input-text-area-transform"
import { selectNodeTransform } from "./runtime/lib/core/transforms/select-transform"

// Module options TypeScript interface definition
// eslint-disable-next-line @typescript-eslint/no-empty-object-type
export interface ModuleOptions {}

export default defineNuxtModule<ModuleOptions>({
  meta: {
    name: "chemical-x-forms",
    configKey: "chemicalX",
  },
  defaults: {},
  setup(_options, _nuxt) {
    _nuxt.options.vue.compilerOptions.nodeTransforms ||= []
    _nuxt.options.vue.compilerOptions.nodeTransforms.push(
      selectNodeTransform,
      inputTextAreaNodeTransform
    )

    _nuxt.hook("vite:extendConfig", (config) => {
      config.build ||= {}
      config.build.rollupOptions ||= {}
      config.build.rollupOptions.external
        = config.build.rollupOptions.external || []

      if (Array.isArray(config.build.rollupOptions.external)) {
        config.build.rollupOptions.external.push(
          "@vue/compiler-core",
          "@vue/shared",
          "@vue/runtime-core",
          "nuxt",
          "zod",
          "immer",
          /lodash-es.*/,
        )
      }
    })

    const resolver = createResolver(import.meta.url)

    addImportsDir(resolver.resolve("./runtime/composables"))

    addPlugin({
      src: resolver.resolve("./runtime/plugins/xmodel"),
      mode: "client",
    })

    addPlugin({
      src: resolver.resolve("./runtime/plugins/xmodel-stub"),
      mode: "server",
    })

    // v-xmodel directive type
    addTypeTemplate({
      filename: "types/v-xmodel.d.ts",
      getContents: () => `// Generated by @chemical-x/forms
import type { VXmodelDirective } from "./runtime/plugins/xmodel.ts"

declare module "@vue/runtime-core" {
  interface GlobalDirectives { 
    vXmodel: ObjectDirective<HTMLElement, VXmodelDirective>
  }
}

export { }`,
    })
  },
})
