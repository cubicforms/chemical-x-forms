import {
  addImportsDir,
  addPlugin,
  addTypeTemplate,
  createResolver,
  defineNuxtModule
} from "@nuxt/kit"
import { inputTextAreaNodeTransform } from "./runtime/lib/core/transforms/input-text-area-transform"
import { selectNodeTransform } from "./runtime/lib/core/transforms/select-transform"

// Module options TypeScript interface definition
// eslint-disable-next-line @typescript-eslint/no-empty-object-type
export interface CXModuleOptions {}

export default defineNuxtModule<CXModuleOptions>({
  meta: {
    name: "chemical-x-forms",
    configKey: "chemicalX",
    compatibility: {
      nuxt: "^3.0.0"
    }
  },
  defaults: {},
  setup(_options, nuxt) {
    nuxt.options.vue.compilerOptions.nodeTransforms ||= []
    nuxt.options.vue.compilerOptions.nodeTransforms.push(
      selectNodeTransform,
      inputTextAreaNodeTransform
    )

    const resolver = createResolver(import.meta.url)
    addImportsDir(resolver.resolve("./runtime/composables"))

    addPlugin({
      src: resolver.resolve("./runtime/plugins/xmodel"),
      mode: "client",
    })

    addPlugin({
      src: resolver.resolve("./runtime/plugins/xmodel-stub"),
      mode: "server",
    })

    // v-xmodel directive type
    addTypeTemplate({
      filename: "types/v-xmodel.d.ts",
      getContents: () => `// Generated by @chemical-x/forms
import type { ObjectDirective } from "vue"
import type { RegisterDirective } from "@chemical-x/forms/types"

declare module "vue" {
  interface GlobalDirectives { 
    vXmodel: RegisterDirective
  }
}

export { }`,
    })
  },
})
